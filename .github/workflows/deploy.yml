name: Build and Deploy to VPS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_API: thaleslj/organizandobolso.api
  IMAGE_ADMIN: thaleslj/organizandobolso.admin

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Gerar appsettings.json (API)
      run: |
        cat > OrganizandoBolso.API/appsettings.json <<EOF
        {
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "AllowedHosts": "*",
          "JWT_SECRET": "${{ secrets.JWT_SECRET }}",
          "MONGODB_URI": "${{ secrets.MONGODB_URI }}",
          "Kestrel": {
            "Endpoints": {
              "Http": {
                "Url": "http://localhost:5000"
              },
              "Https": {
                "Url": "https://localhost:5001"
              }
            }
          }
        }
        EOF

    - name: Gerar appsettings.json (Admin)
      run: |
        cat > OrganizandoBolso.Admin/OrganizandoBolso.Admin/appsettings.json <<EOF
        {
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "AllowedHosts": "*"
        }
        EOF
        
    - name: Extract metadata (API)
      id: meta_api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata (ADMIN)
      id: meta_admin
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_ADMIN }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.API
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta_api.outputs.tags }}
        labels: ${{ steps.meta_api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push ADMIN image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.Admin
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta_admin.outputs.tags }}
        labels: ${{ steps.meta_admin.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create production .env files
      run: |
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env.api
        echo "ASPNETCORE_ENVIRONMENT=Production" >> .env.api
        echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" > .env.admin
        echo "ASPNETCORE_ENVIRONMENT=Production" >> .env.admin
        
    - name: Copy docker-compose and env to VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/organizandobolso-api ~/organizandobolso-admin"
        scp docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/organizandobolso-api/docker-compose.yml
        scp .env.api ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/organizandobolso-api/.env
        scp docker-compose.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/organizandobolso-admin/docker-compose.yml
        scp .env.admin ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/organizandobolso-admin/.env
        
    - name: Deploy on VPS (API and ADMIN)
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ~/organizandobolso-api
          
          # Stop existing containers (only this project)
          docker-compose down || true
          
          # Remove old images to free space
          docker image prune -f
          
          # Pull latest image and start containers
          docker-compose pull api
          docker-compose up -d api
          
          # Show logs
          docker-compose logs --tail=50 api

          cd ~/organizandobolso-admin
          docker-compose down || true
          docker image prune -f
          docker-compose pull admin
          docker-compose up -d admin
          docker-compose logs --tail=50 admin
        EOF
